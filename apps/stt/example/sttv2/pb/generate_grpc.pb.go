// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v5.28.3
// source: mcenter/apps/stt/example/sttv2/pb/generate.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	RPC_SayHello_FullMethodName = "/gokade.mcenter.stt.RPC/SayHello"
)

// RPCClient is the client API for RPC service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RPCClient interface {
	SayHello(ctx context.Context, opts ...grpc.CallOption) (RPC_SayHelloClient, error)
}

type rPCClient struct {
	cc grpc.ClientConnInterface
}

func NewRPCClient(cc grpc.ClientConnInterface) RPCClient {
	return &rPCClient{cc}
}

func (c *rPCClient) SayHello(ctx context.Context, opts ...grpc.CallOption) (RPC_SayHelloClient, error) {
	stream, err := c.cc.NewStream(ctx, &RPC_ServiceDesc.Streams[0], RPC_SayHello_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &rPCSayHelloClient{stream}
	return x, nil
}

type RPC_SayHelloClient interface {
	Send(*CC) error
	Recv() (*Message, error)
	grpc.ClientStream
}

type rPCSayHelloClient struct {
	grpc.ClientStream
}

func (x *rPCSayHelloClient) Send(m *CC) error {
	return x.ClientStream.SendMsg(m)
}

func (x *rPCSayHelloClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPCServer is the server API for RPC service.
// All implementations must embed UnimplementedRPCServer
// for forward compatibility
type RPCServer interface {
	SayHello(RPC_SayHelloServer) error
	mustEmbedUnimplementedRPCServer()
}

// UnimplementedRPCServer must be embedded to have forward compatible implementations.
type UnimplementedRPCServer struct {
}

func (UnimplementedRPCServer) SayHello(RPC_SayHelloServer) error {
	return status.Errorf(codes.Unimplemented, "method SayHello not implemented")
}
func (UnimplementedRPCServer) mustEmbedUnimplementedRPCServer() {}

// UnsafeRPCServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RPCServer will
// result in compilation errors.
type UnsafeRPCServer interface {
	mustEmbedUnimplementedRPCServer()
}

func RegisterRPCServer(s grpc.ServiceRegistrar, srv RPCServer) {
	s.RegisterService(&RPC_ServiceDesc, srv)
}

func _RPC_SayHello_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RPCServer).SayHello(&rPCSayHelloServer{stream})
}

type RPC_SayHelloServer interface {
	Send(*Message) error
	Recv() (*CC, error)
	grpc.ServerStream
}

type rPCSayHelloServer struct {
	grpc.ServerStream
}

func (x *rPCSayHelloServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

func (x *rPCSayHelloServer) Recv() (*CC, error) {
	m := new(CC)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RPC_ServiceDesc is the grpc.ServiceDesc for RPC service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RPC_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gokade.mcenter.stt.RPC",
	HandlerType: (*RPCServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SayHello",
			Handler:       _RPC_SayHello_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "mcenter/apps/stt/example/sttv2/pb/generate.proto",
}
